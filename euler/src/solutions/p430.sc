package solutions

object p430 {
  // sum(pi), pi - probability of i-th index to show
  // qi - probability to change at step
  // pi = sum by 2t of [ C(nt, 2t) * qi^(2t) * (1 - qi)^(nt - 2t) ]
  // total = C(n, 2) + n = n * (n - 1) / 2 + n = (n^2 - n + 2n) / 2
  // i -> 0 ... n - 1
  // i * (n - i + 1) / total^2
  def sqr(x: Double) = x * x                      //> sqr: (x: Double)Double
  def solve(n: Long, steps: Int): Double = {

    val total = n * n

    val qs = (0 until n.toInt).map(_.toDouble).map(i => (total - sqr(i) - sqr(n - 1 - i)) / total)
    def findAfter(q: Double, steps: Int, res: Double): Double = {
      if (steps == 0) res
      else findAfter(q, steps - 1, res * (1 - q) + (1 - res) * q)
    }

    val res = qs.map(findAfter(_, steps, 1))
    println(res)
    res.foldLeft(0.)(_ + _)
  }                                               //> solve: (n: Long, steps: Int)Double
  solve(3, 1)                                     //> Vector(0.4444444444444444, 0.2222222222222222, 0.4444444444444444)
                                                  //| res0: Double = 1.1111111111111112
  10. / 9                                         //> res1: Double(1.1111111111111112) = 1.1111111111111112
  
  solve(3, 2)                                     //> Vector(0.5061728395061729, 0.654320987654321, 0.5061728395061729)
                                                  //| res2: Double = 1.6666666666666667
  5. / 3                                          //> res3: Double(1.6666666666666667) = 1.6666666666666667
  
  solve(10, 4)                                    //> Vector(0.5738816800000001, 0.50405, 0.50000648, 0.50005, 0.50052488, 0.50052
                                                  //| 488, 0.50005, 0.50000648, 0.50405, 0.5738816800000001)
                                                  //| res4: Double = 5.1570260800000005
  5.157                                           //> res5: Double(5.157) = 5.157

	solve(100, 10)                            //> Vector(0.8331095016030224, 0.7195666148874411, 0.643419840588882, 0.59279767
                                                  //| 46820351, 0.5594509043547949, 0.5376936312153083, 0.5236398590577069, 0.5146
                                                  //| 572150179046, 0.508979066376106, 0.5054313357694549, 0.5032417327885566, 0.5
                                                  //| 019077269899277, 0.5011060325254486, 0.5006311660863829, 0.5003541749615215,
                                                  //|  0.50019521932812, 0.5001055705845281, 0.5000559380998548, 0.500028999032346
                                                  //| 3, 0.5000146846473227, 0.5000072502965693, 0.5000034831196859, 0.50000162439
                                                  //| 47585, 0.5000007334577092, 0.5000003196686412, 0.500000134011834, 0.50000005
                                                  //| 38183748, 0.5000000206052428, 0.500000007478413, 0.5000000025553597, 0.50000
                                                  //| 00008152383, 0.5000000002403414, 0.5000000000646314, 0.5000000000155909, 0.5
                                                  //| 000000000033, 0.5000000000005947, 0.5000000000000875, 0.5000000000000099, 0.
                                                  //| 5000000000000008, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5
                                                  //| , 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5000000000000008, 0.50
                                                  //| 00000000000099, 0.500000
                                                  //| Output exceeds cutoff limit.
	solve(100, 4000)                          //> Vector(0.5000000000000013, 0.5000000000000007, 0.5000000000000004, 0.5000000
                                                  //| 000000003, 0.5000000000000002, 0.5000000000000002, 0.5000000000000002, 0.500
                                                  //| 0000000000001, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001, 0
                                                  //| .5000000000000001, 0.5000000000000001, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.
                                                  //| 5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5
                                                  //| , 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                                                  //|  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 
                                                  //| 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0
                                                  //| .5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5000000000000001, 0.5000000000000001, 0.50000
                                                  //| 00000000001, 0.5000000000000001, 0.5000000000000001, 0.5000000000000001, 0.5
                                                  //| 000000000000002, 0.5000000000000002, 0.5000000000000002, 0.5000000000000003,
                                                  //|  0.5000000000000004, 0.5000000000000007, 0.5000000000000013)
                                                  //| res7: Double = 50.0
	51.893                                    //> res8: Double(51.893) = 51.893
}